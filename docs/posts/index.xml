<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on noone.dev</title>
    <link>/posts/</link>
    <description>Recent content in Posts on noone.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Mar 2020 12:38:18 -0700</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spotify Top Tracks - Mar 2020</title>
      <link>/posts/top-tracks-mar-2020/</link>
      <pubDate>Wed, 11 Mar 2020 12:38:18 -0700</pubDate>
      
      <guid>/posts/top-tracks-mar-2020/</guid>
      <description> Another dump of my top tracks, just for fun.
    Dear Enemy - Night Club&amp;nbsp;  Requiem for Romance (2016)  listen on spotify      Get the F*ck out of Here - Kobra And The Lotus&amp;nbsp;  Evolution (2019)  listen on spotify      War Eternal - Arch Enemy&amp;nbsp;  War Eternal (2014)  listen on spotify      Let It Ride - Kobra And The Lotus&amp;nbsp;  Words of the Prophets (2015)  listen on spotify      The World Is Yours - Arch Enemy&amp;nbsp;  Will To Power (2017)  listen on spotify      Call Me - In This Moment&amp;nbsp;  Call Me (2009)  listen on spotify      Vampires - Night Club&amp;nbsp;  Scary World (2018)  listen on spotify      Lay It on the Line - Triumph&amp;nbsp;  Greatest Hits Remixed (2010)  listen on spotify      DEUTSCHLAND - Rammstein&amp;nbsp;  RAMMSTEIN (2019)  listen on spotify      Lay It on the Line - Kobra And The Lotus&amp;nbsp;  Words of the Prophets (2015)  listen on spotify   </description>
    </item>
    
    <item>
      <title>Spotify Top Tracks - Jan 2020</title>
      <link>/posts/top-tracks-jan-2020/</link>
      <pubDate>Fri, 31 Jan 2020 11:24:55 -0800</pubDate>
      
      <guid>/posts/top-tracks-jan-2020/</guid>
      <description>I&#39;m experimenting with a script to auto-generate a list of my top tracks from Spotify, with the idea that I will post that list every 3 months or so. This is the output of my prototype.  In the next version I&#39;ll provide links in the list. I&#39;ve also considered downloading the album covers and serving them myself rather than relying on Spotify URLs. I&#39;m not sure if there are any legal issues with that.</description>
    </item>
    
    <item>
      <title>CLI Auth to the Spotify API</title>
      <link>/posts/cli-auth-to-the-spotify-api/</link>
      <pubDate>Thu, 30 Jan 2020 17:00:27 -0800</pubDate>
      
      <guid>/posts/cli-auth-to-the-spotify-api/</guid>
      <description>In this post, I will show how write a command-line based application (CLI) that can authenticate to Spotify as a user and then use the Spotify API on behalf of that user.
I&amp;rsquo;ll be using the Spotify client library from github.com/zmb3/spotify.
The tricky bit is getting the user&amp;rsquo;s access token after logging in. The Spotify Web API uses OAuth 2.0 for authorization, which requires some browser interactions and redirects.
To do that from the command-line, we have to get a little bit creative.</description>
    </item>
    
    <item>
      <title>Vue.js in Docker</title>
      <link>/posts/vuejs-in-docker/</link>
      <pubDate>Tue, 13 Aug 2019 11:07:26 -0700</pubDate>
      
      <guid>/posts/vuejs-in-docker/</guid>
      <description>This post will show how to create a simple Vue.js single page application and host it in a docker container.
Create the application Install the Vue command line interface (cli) from here. I&amp;rsquo;ll be using yarn for this example..
yarn global add @vue/cli Create a new hello-world application and change into the application&amp;rsquo;s folder.
# this places the new application in a ./hello-world folder vue create hello-world cd hello-world yarn install Build a Docker image Now that we have a working Vue.</description>
    </item>
    
    <item>
      <title>Hello K8s in Windows - Part 2</title>
      <link>/posts/hello-k8s-windows-part-2/</link>
      <pubDate>Tue, 30 Apr 2019 13:10:25 -0700</pubDate>
      
      <guid>/posts/hello-k8s-windows-part-2/</guid>
      <description>This is the second in a multi-part series that will show how to easily get Kubernetes up and running in Windows and deploy a sample application. Almost everything also applies to Linux, MacOS, etc.
The source code for this example can be found at https://github.com/cleverswine/hello-k8s-win
These posts are based on an intoductory presentation that I gave to my company.
Deploy to a local Kubernetes (k8s) cluster Install the tools
 Docker Desktop - enable Kubernetes after installing (https://hub.</description>
    </item>
    
    <item>
      <title>Hello K8s in Windows - Part 1</title>
      <link>/posts/hello-k8s-windows-part-1/</link>
      <pubDate>Tue, 30 Apr 2019 13:01:45 -0700</pubDate>
      
      <guid>/posts/hello-k8s-windows-part-1/</guid>
      <description>This is the first in a multi-part series that will show how to easily get Kubernetes up and running in Windows and deploy a sample application. Almost everything also applies to Linux, MacOS, etc.
The source code for this example can be found at https://github.com/cleverswine/hello-k8s-win
These posts are based on an intoductory presentation that I gave to my company.
Sample Application Consider a simple message processing application, as shown here:</description>
    </item>
    
    <item>
      <title>Displaying Parquet Files</title>
      <link>/posts/displaying-parquet-files/</link>
      <pubDate>Thu, 18 Apr 2019 15:24:10 -0700</pubDate>
      
      <guid>/posts/displaying-parquet-files/</guid>
      <description>Apache Parquet is a columnar storage format available to any project in the Hadoop ecosystem, regardless of the choice of data processing framework, data model or programming language.
I&amp;rsquo;ll look at 3 interesting ways to peek into parquet files.
1) Jupyter Notebooks as a Simple Viewer Using a Jupyter Notebook with pyarrow and pandas
2) PyQt5 for a Native GUI Using Python, pyarrow, and PyQt5 to display a simple, cross-platform, native UI table.</description>
    </item>
    
    <item>
      <title>Parallelization in Go and .NET</title>
      <link>/posts/parallelization-in-go-and-dotnet/</link>
      <pubDate>Thu, 21 Mar 2019 16:33:02 -0700</pubDate>
      
      <guid>/posts/parallelization-in-go-and-dotnet/</guid>
      <description>This is a comparison of bounded parallel processing with error handling and cancellation in Go and .NET.
The sample code will take an array of strings and print the ASCII code representation of each string in parallel. For example &amp;ldquo;Lorem&amp;rdquo; would evaluate to Lorem/76/111/114/101/109/. If a string is empty, an error occurs and processing is canceled.
First, the Go code.
package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;golang.org/x/sync/errgroup&amp;#34; ) func main() { parallelLimit := 4 testData := strings.</description>
    </item>
    
    <item>
      <title>Hello Web .NET Core</title>
      <link>/posts/hello-web-dotnet/</link>
      <pubDate>Thu, 14 Mar 2019 15:09:54 -0700</pubDate>
      
      <guid>/posts/hello-web-dotnet/</guid>
      <description>This is a basic web server written in ASP.NET Core.
using Microsoft.AspNetCore; using Microsoft.AspNetCore.Hosting; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.DependencyInjection; namespace HelloWeb { public class Program { public static void Main(string[] args) { CreateWebHostBuilder(args).Build().Run(); } public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&amp;gt; WebHost.CreateDefaultBuilder(args) .UseStartup&amp;lt;Startup&amp;gt;(); } public class Startup { public void Configure(IApplicationBuilder app) { app.Run(async (context) =&amp;gt; { await context.Response.WriteAsync(&amp;#34;Hello World!&amp;#34;); }); } } }  </description>
    </item>
    
    <item>
      <title>Hello Web Go</title>
      <link>/posts/hello-web-go/</link>
      <pubDate>Thu, 14 Mar 2019 14:38:04 -0700</pubDate>
      
      <guid>/posts/hello-web-go/</guid>
      <description>This is the most basic web server written in Go.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;#34;Hello World!&amp;#34;) }) http.ListenAndServe(&amp;#34;:80&amp;#34;, nil) } </description>
    </item>
    
  </channel>
</rss>