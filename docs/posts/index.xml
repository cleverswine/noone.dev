<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on noone.dev</title>
    <link>/posts/</link>
    <description>Recent content in Posts on noone.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright Â© 2019, Kevin Noone; all rights reserved.</copyright>
    <lastBuildDate>Thu, 18 Apr 2019 15:24:10 -0700</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Displaying Parquet Files</title>
      <link>/posts/displaying-parquet-files/</link>
      <pubDate>Thu, 18 Apr 2019 15:24:10 -0700</pubDate>
      
      <guid>/posts/displaying-parquet-files/</guid>
      <description>Apache Parquet is a columnar storage format available to any project in the Hadoop ecosystem, regardless of the choice of data processing framework, data model or programming language.
I&amp;rsquo;ll look at 3 interesting ways to peek into parquet files.
1) Jupyter Notebooks as a Simple Viewer Using a Jupyter Notebook with pyarrow and pandas
2) PyQt5 for a Native GUI Using Python, pyarrow, and PyQt5 to display a simple, cross-platform, native UI table.</description>
    </item>
    
    <item>
      <title>Parallelization in Go and .NET</title>
      <link>/posts/parallelization-in-go-and-dotnet/</link>
      <pubDate>Thu, 21 Mar 2019 16:33:02 -0700</pubDate>
      
      <guid>/posts/parallelization-in-go-and-dotnet/</guid>
      <description>This is a comparison of bounded parallel processing with error handling and cancellation in Go and .NET.
The sample code will take an array of strings and print the ASCII code representation of each string in parallel. For example &amp;ldquo;Lorem&amp;rdquo; would evaluate to Lorem/76/111/114/101/109/. If a string is empty, an error occurs and processing is canceled.
First, the Go code.
package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;golang.org/x/sync/errgroup&amp;#34; ) func main() { parallelLimit := 4 testData := strings.</description>
    </item>
    
    <item>
      <title>Hello Web .NET Core</title>
      <link>/posts/hello-web-dotnet/</link>
      <pubDate>Thu, 14 Mar 2019 15:09:54 -0700</pubDate>
      
      <guid>/posts/hello-web-dotnet/</guid>
      <description>This is a basic web server written in ASP.NET Core.
using Microsoft.AspNetCore; using Microsoft.AspNetCore.Hosting; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.DependencyInjection; namespace HelloWeb { public class Program { public static void Main(string[] args) { CreateWebHostBuilder(args).Build().Run(); } public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&amp;gt; WebHost.CreateDefaultBuilder(args) .UseStartup&amp;lt;Startup&amp;gt;(); } public class Startup { public void Configure(IApplicationBuilder app) { app.Run(async (context) =&amp;gt; { await context.Response.WriteAsync(&amp;#34;Hello World!&amp;#34;); }); } } }  </description>
    </item>
    
    <item>
      <title>Hello Web Go</title>
      <link>/posts/hello-web-go/</link>
      <pubDate>Thu, 14 Mar 2019 14:38:04 -0700</pubDate>
      
      <guid>/posts/hello-web-go/</guid>
      <description>This is the most basic web server written in Go.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;#34;Hello World!&amp;#34;) }) http.ListenAndServe(&amp;#34;:80&amp;#34;, nil) } </description>
    </item>
    
  </channel>
</rss>