<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Posts on noone.dev</title>
    <link>/posts/</link>
    <description>Recent content in Blog Posts on noone.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Feb 2021 14:55:58 -0500</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spotify Top Tracks - Feb 2021</title>
      <link>/posts/hugo-top-tracks/</link>
      <pubDate>Fri, 12 Feb 2021 14:55:58 -0500</pubDate>
      
      <guid>/posts/hugo-top-tracks/</guid>
      <description> Here are some of the things I&#39;ve been listening to lately.
    We Drink Your Blood - Powerwolf&amp;nbsp;  Blood of the Saints (2011)  listen on spotify      82nd All the Way - Amaranthe&amp;nbsp;  82nd All the Way (2020)  listen on spotify      Marching on Versailles - Ad Infinitum&amp;nbsp;  Chapter I: Monarchy (2020)  listen on spotify      Die Hörner Hoch - Feuerschwanz&amp;nbsp;  Methämmer (2018)  listen on spotify      Burning Bridges - Delain&amp;nbsp;  Burning Bridges (2019)  listen on spotify      Schubsetanz - Feuerschwanz&amp;nbsp;  Methämmer (2018)  listen on spotify      Primo Victoria - Sabaton&amp;nbsp;  Primo Victoria (Re-Armed) (2010)  listen on spotify      A Secret Door - Avatar&amp;nbsp;  Hunter Gatherer (2020)  listen on spotify      Drop Dead Cynical - Amaranthe&amp;nbsp;  MASSIVE ADDICTIVE (2014)  listen on spotify      Die by the Blade - Beast In Black&amp;nbsp;  From Hell with Love (2019)  listen on spotify    </description>
    </item>
    
    <item>
      <title>Impala ODBC, Dotnet Core, and Docker</title>
      <link>/posts/impala-odbc/</link>
      <pubDate>Fri, 31 Jul 2020 20:44:16 +0000</pubDate>
      
      <guid>/posts/impala-odbc/</guid>
      <description>This post will show how to query an Impala database from a DotNet Core application running in Docker.
Prerequisites Knowledge of Apache Hadoop, Docker, and DotNet Core
Impala Apache Impala is the open source, native analytic database for Apache Hadoop.
Cloudera provides an ODBC driver for Impala that can be downloaded from their website (requires an account).
Installing the Impala ODBC driver Assuming you have downloaded the Cloudera Impala ODBC driver (in this case, I have downloaded it to: clouderaimpalaodbc_2.</description>
    </item>
    
    <item>
      <title>Authorization Flow with a CLI</title>
      <link>/posts/authorization-flow-cli/</link>
      <pubDate>Thu, 18 Jun 2020 19:01:22 +0000</pubDate>
      
      <guid>/posts/authorization-flow-cli/</guid>
      <description>When calling a public API on behalf of a user, you&amp;rsquo;ll often need to use the Authorization Code Flow to get a token to use on the API calls. This flow invloves redirecting the user to the authorization server where they will sign in and give consent for your application to access the requested resources (scopes).
From a command-line application, we don&amp;rsquo;t have a web page to do this redirect flow.</description>
    </item>
    
    <item>
      <title>Vue.js in Docker</title>
      <link>/posts/vuejs-in-docker/</link>
      <pubDate>Tue, 13 Aug 2019 11:07:26 -0700</pubDate>
      
      <guid>/posts/vuejs-in-docker/</guid>
      <description>This post will show how to create a simple Vue.js single page application and host it in a docker container.
Create the application Install the Vue command line interface (cli) from here. I&amp;rsquo;ll be using yarn for this example..
yarn global add @vue/cli Create a new hello-world application and change into the application&amp;rsquo;s folder.
# this places the new application in a ./hello-world folder vue create hello-world cd hello-world yarn install Build a Docker image Now that we have a working Vue.</description>
    </item>
    
    <item>
      <title>Hello K8s in Windows - Part 2</title>
      <link>/posts/hello-k8s-windows-part-2/</link>
      <pubDate>Tue, 30 Apr 2019 13:10:25 -0700</pubDate>
      
      <guid>/posts/hello-k8s-windows-part-2/</guid>
      <description>This is the second in a multi-part series that will show how to easily get Kubernetes up and running in Windows and deploy a sample application. Almost everything also applies to Linux, MacOS, etc.
The source code for this example can be found at https://github.com/cleverswine/hello-k8s-win
These posts are based on an intoductory presentation that I gave to my company.
Deploy to a local Kubernetes (k8s) cluster Install the tools
 Docker Desktop - enable Kubernetes after installing (https://hub.</description>
    </item>
    
    <item>
      <title>Hello K8s in Windows - Part 1</title>
      <link>/posts/hello-k8s-windows-part-1/</link>
      <pubDate>Tue, 30 Apr 2019 13:01:45 -0700</pubDate>
      
      <guid>/posts/hello-k8s-windows-part-1/</guid>
      <description>This is the first in a multi-part series that will show how to easily get Kubernetes up and running in Windows and deploy a sample application. Almost everything also applies to Linux, MacOS, etc.
The source code for this example can be found at https://github.com/cleverswine/hello-k8s-win
These posts are based on an intoductory presentation that I gave to my company.
Sample Application Consider a simple message processing application, as shown here:</description>
    </item>
    
    <item>
      <title>Displaying Parquet Files</title>
      <link>/posts/displaying-parquet-files/</link>
      <pubDate>Thu, 18 Apr 2019 15:24:10 -0700</pubDate>
      
      <guid>/posts/displaying-parquet-files/</guid>
      <description>Apache Parquet is a columnar storage format available to any project in the Hadoop ecosystem, regardless of the choice of data processing framework, data model or programming language.
I&amp;rsquo;ll look at 3 interesting ways to peek into parquet files.
1) Jupyter Notebooks as a Simple Viewer Using a Jupyter Notebook with pyarrow and pandas
2) PyQt5 for a Native GUI Using Python, pyarrow, and PyQt5 to display a simple, cross-platform, native UI table.</description>
    </item>
    
    <item>
      <title>Parallelization in Go and .NET</title>
      <link>/posts/parallelization-in-go-and-dotnet/</link>
      <pubDate>Thu, 21 Mar 2019 16:33:02 -0700</pubDate>
      
      <guid>/posts/parallelization-in-go-and-dotnet/</guid>
      <description>This is a comparison of bounded parallel processing with error handling and cancellation in Go and .NET.
The sample code will take an array of strings and print the ASCII code representation of each string in parallel. For example &amp;ldquo;Lorem&amp;rdquo; would evaluate to Lorem/76/111/114/101/109/. If a string is empty, an error occurs and processing is canceled.
First, the Go code.
package main import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;golang.org/x/sync/errgroup&amp;#34; ) func main() { parallelLimit := 4 testData := strings.</description>
    </item>
    
    <item>
      <title>Hello Web .NET Core</title>
      <link>/posts/hello-web-dotnet/</link>
      <pubDate>Thu, 14 Mar 2019 15:09:54 -0700</pubDate>
      
      <guid>/posts/hello-web-dotnet/</guid>
      <description>This is a basic web server written in ASP.NET Core.
using Microsoft.AspNetCore; using Microsoft.AspNetCore.Hosting; using Microsoft.AspNetCore.Builder; using Microsoft.AspNetCore.Http; using Microsoft.Extensions.DependencyInjection; namespace HelloWeb { public class Program { public static void Main(string[] args) { CreateWebHostBuilder(args).Build().Run(); } public static IWebHostBuilder CreateWebHostBuilder(string[] args) =&amp;gt; WebHost.CreateDefaultBuilder(args) .UseStartup&amp;lt;Startup&amp;gt;(); } public class Startup { public void Configure(IApplicationBuilder app) { app.Run(async (context) =&amp;gt; { await context.Response.WriteAsync(&amp;#34;Hello World!&amp;#34;); }); } } }  </description>
    </item>
    
    <item>
      <title>Hello Web Go</title>
      <link>/posts/hello-web-go/</link>
      <pubDate>Thu, 14 Mar 2019 14:38:04 -0700</pubDate>
      
      <guid>/posts/hello-web-go/</guid>
      <description>This is the most basic web server written in Go.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;#34;Hello World!&amp;#34;) }) http.ListenAndServe(&amp;#34;:80&amp;#34;, nil) }  </description>
    </item>
    
  </channel>
</rss>
